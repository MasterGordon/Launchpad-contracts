/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type CampaignLocked = ContractEventLog<{
  collected: string;
  0: string;
}>;
export type CampaignUnlocked = ContractEventLog<{}>;
export type Initialized = ContractEventLog<{
  owner: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type TokensBought = ContractEventLog<{
  user: string;
  value: string;
  0: string;
  1: string;
}>;

export interface PSIPadCampaign extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): PSIPadCampaign;
  clone(): PSIPadCampaign;
  methods: {
    buyTokens(): PayableTransactionObject<void>;

    calculateAmount(
      _amount: number | string | BN
    ): NonPayableTransactionObject<string>;

    campaignTokens(): NonPayableTransactionObject<string>;

    collected(): NonPayableTransactionObject<string>;

    doRefund(): NonPayableTransactionObject<boolean>;

    factory_address(): NonPayableTransactionObject<string>;

    failed(): NonPayableTransactionObject<boolean>;

    feeTokens(): NonPayableTransactionObject<string>;

    finalized(): NonPayableTransactionObject<boolean>;

    getData(): NonPayableTransactionObject<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ]
    >;

    getGivenAmount(_address: string): NonPayableTransactionObject<string>;

    getRemaining(): NonPayableTransactionObject<string>;

    initialize(
      _data: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      _token: string,
      _owner: string,
      _factory_address: string,
      _router_address: string,
      _stable_coin_fee: number | string | BN,
      _campaignTokens: number | string | BN,
      _feeTokens: number | string | BN
    ): NonPayableTransactionObject<void>;

    isLive(): NonPayableTransactionObject<boolean>;

    lock(): NonPayableTransactionObject<void>;

    locked(): NonPayableTransactionObject<boolean>;

    lp_address(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    psipad_factory(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    router_address(): NonPayableTransactionObject<string>;

    setLPAddress(_lp_address: string): NonPayableTransactionObject<void>;

    stable_coin_fee(): NonPayableTransactionObject<string>;

    token(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    unlock(): NonPayableTransactionObject<void>;

    unlock_date(): NonPayableTransactionObject<string>;

    withdrawFunds(): NonPayableTransactionObject<void>;

    withdrawTokens(): NonPayableTransactionObject<string>;
  };
  events: {
    CampaignLocked(cb?: Callback<CampaignLocked>): EventEmitter;
    CampaignLocked(
      options?: EventOptions,
      cb?: Callback<CampaignLocked>
    ): EventEmitter;

    CampaignUnlocked(cb?: Callback<CampaignUnlocked>): EventEmitter;
    CampaignUnlocked(
      options?: EventOptions,
      cb?: Callback<CampaignUnlocked>
    ): EventEmitter;

    Initialized(cb?: Callback<Initialized>): EventEmitter;
    Initialized(
      options?: EventOptions,
      cb?: Callback<Initialized>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    TokensBought(cb?: Callback<TokensBought>): EventEmitter;
    TokensBought(
      options?: EventOptions,
      cb?: Callback<TokensBought>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "CampaignLocked", cb: Callback<CampaignLocked>): void;
  once(
    event: "CampaignLocked",
    options: EventOptions,
    cb: Callback<CampaignLocked>
  ): void;

  once(event: "CampaignUnlocked", cb: Callback<CampaignUnlocked>): void;
  once(
    event: "CampaignUnlocked",
    options: EventOptions,
    cb: Callback<CampaignUnlocked>
  ): void;

  once(event: "Initialized", cb: Callback<Initialized>): void;
  once(
    event: "Initialized",
    options: EventOptions,
    cb: Callback<Initialized>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "TokensBought", cb: Callback<TokensBought>): void;
  once(
    event: "TokensBought",
    options: EventOptions,
    cb: Callback<TokensBought>
  ): void;
}
